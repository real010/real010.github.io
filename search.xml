<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Github+Hexo搭建属于你自己的博客</title>
      <link href="/2019/05/01/CreatBlog/"/>
      <url>/2019/05/01/CreatBlog/</url>
      
        <content type="html"><![CDATA[<p>如果你也想要定制一个自己的博客，那么就跟着一起来吧！<br><a id="more"></a></p><h1 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h1><h2 id="添加分类列表"><a href="#添加分类列表" class="headerlink" title="添加分类列表"></a>添加分类列表</h2><ul><li>在项目根目录下，执行下面的命令行，新建分类页面，然后会在项目根目录下的 <strong>source</strong> 文件夹中新建一个 <strong>categories</strong> 文件夹。<br><code>hexo new page categories</code></li><li>打开 <strong>categories</strong> 文件夹中的 <strong>index.md</strong> 文件，添加<strong>type</strong>标签 ，设置为 <strong>“categories”</strong>。 </li><li>接着到<strong>theme</strong>文件夹下的 <strong>_config.yml</strong> 配置文件下，定位到 <strong>menu</strong> 模块，把 <strong>categories</strong>前面的<strong><em>#</em></strong>去掉。</li><li>然后将代码提交到<strong>GitHub</strong>重新打开博客页面就可以看到多了一个<strong>分类</strong>。<h2 id="添加博客头像"><a href="#添加博客头像" class="headerlink" title="添加博客头像"></a>添加博客头像</h2><h3 id="使用完整互联网URL"><a href="#使用完整互联网URL" class="headerlink" title="使用完整互联网URL"></a>使用完整互联网URL</h3></li><li>打开主题文件夹下的 <strong>_config.yml</strong> 配置文件，定位到 <strong>avatar</strong>，然后把一个在线的头像图片地址（百度图片中直接复制链接即可），作为 <strong>url</strong> 的参数。</li><li>将本地代码上传至<strong>GitHub</strong>，刷新页面，就可以了。<h3 id="站点内的地址"><a href="#站点内的地址" class="headerlink" title="站点内的地址"></a>站点内的地址</h3></li><li>将头像放置主题目录下的 <code>source/uploads/</code>（新建 uploads 目录若不存在） 配置为：<code>url: /uploads/avatar.png</code>，或者 放置在 <code>source/images</code> 目录下<br>配置为：<code>url: /images/avatar.png</code>。</li><li>刷新页面重试。<h2 id="代码高亮设置"><a href="#代码高亮设置" class="headerlink" title="代码高亮设置"></a>代码高亮设置</h2></li><li>在主题文件夹的 <strong>_config.yml</strong> 配置文件中，定位到 <strong>highlight_theme</strong>，根据个人喜好修改语法高亮。</li><li>由于本人使用<strong>Next</strong>主题，<strong>Next</strong> 默认使用的是白色的 <strong>normal</strong> 主题，可选的语法高亮有 <strong>normal</strong>，<strong>night</strong>， <strong>night blue</strong>， <strong>night bright</strong>，<strong>night eighties</strong>。<h2 id="博客添加站内搜索"><a href="#博客添加站内搜索" class="headerlink" title="博客添加站内搜索"></a>博客添加站内搜索</h2></li></ul><h2 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h2><ol><li>登录 <a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>， 定位到站点的代码获取页面</li><li>复制 <code>hm.js?</code> 后面那串统计脚本 id。</li><li>编辑 主题配置文件， 修改字段 <code>baidu_analytics</code> 字段，值设置成你的百度统计脚本 id。<h2 id="网页底部字数统计"><a href="#网页底部字数统计" class="headerlink" title="网页底部字数统计"></a>网页底部字数统计</h2></li></ol><ul><li>在项目根目录安装<strong>hexo</strong>插件<br><code>npm install hexo-wordcount --save</code></li><li><p>打开主题文件夹下的 <code>layout/_partials/footer.swig</code> 文件，在文末添加上下面这段代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-info"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-count"</span>&gt;</span>博客全站共&#123;&#123; totalcount(site) &#125;&#125;字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>deploy查看效果。</p><h2 id="网页底部添加访问量"><a href="#网页底部添加访问量" class="headerlink" title="网页底部添加访问量"></a>网页底部添加访问量</h2></li><li>上一节已经安装相关插件，所以本次不需要再次安装。</li><li>打开主题文件夹下的<code>layout/_partials/footer.swig</code> 文件，在文末添加如下代码。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"powered-by"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-user-md"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line"> 本站访问量:<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>次</span><br><span class="line"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line"> 本站总访客量：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人</span><br><span class="line"> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java基础知识（一）</title>
      <link href="/2019/03/24/Think-in-Java/"/>
      <url>/2019/03/24/Think-in-Java/</url>
      
        <content type="html"><![CDATA[<p>Java基础学习笔记</p><a id="more"></a><hr><h1 id="Java抽象类"><a href="#Java抽象类" class="headerlink" title="Java抽象类"></a>Java抽象类</h1><ul><li>Java抽象类中可以有抽象方法，也可以没有抽象方法，只要有一个抽象方法，类前就必须有 <em>abstract</em> 关键字</li><li>抽象类不可以创建对象，但是可以声明一个引用。</li><li>抽象类中的抽象方法可以不用给出实现，只用给出方法声明，抽象类注定要被继承，若子类是具体类，则该具体子类中必须实现抽象类中定义的所有抽象方法（子类中实现抽象方法时必须符合方法覆盖的语法规则）；若子类为抽象类，则子类不能定义与父类同名的抽象方法。</li><li>抽象类中的非抽象方法也可调用抽象方法。</li><li><em>abstract</em> 不能与 <em>final</em> 一同修饰类（final修饰的类不能被继承），同样，<em>abstract</em> 也不能与 <em>private</em>、<em>static</em>、<em>native</em> 共同修饰一个方法（静态方法会被直接调用）。</li></ul><hr><h1 id="方法覆盖与重载的规则与区别"><a href="#方法覆盖与重载的规则与区别" class="headerlink" title="方法覆盖与重载的规则与区别"></a>方法覆盖与重载的规则与区别</h1><ul><li>方法重载：发生在同一个类中，方法名必须相同，参数类型或者参数个数二者之一必须不同，只有返回值不同的两个方法编译不会通过。</li><li>方法覆盖：发生自父子类中，方法名与参数列表必须相同，返回值范围小于等于父类，抛出异常的范围小于等于父类。（若父类方法被 <em>private</em> 修饰，则子类不能重写该方法）。</li></ul><hr><h1 id="Java接口（interface）"><a href="#Java接口（interface）" class="headerlink" title="Java接口（interface）"></a>Java接口（interface）</h1><hr><h1 id="Java策略模式"><a href="#Java策略模式" class="headerlink" title="Java策略模式"></a>Java策略模式</h1><hr><h1 id="String对象两种创建方法区别"><a href="#String对象两种创建方法区别" class="headerlink" title="String对象两种创建方法区别"></a>String对象两种创建方法区别</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><hr><h1 id="Java中-与-equals-的区别"><a href="#Java中-与-equals-的区别" class="headerlink" title="Java中 == 与 equals 的区别"></a>Java中 == 与 equals 的区别</h1><ul><li>==：判断两个对象的地址是不是相同，即判断两个引用是否指向同一对象（针对基本类型，则比较的是值是否相同）。</li><li>equals：若类中未重写 <em>equals</em> 方法，则使用 <em>equals</em>方法等价于使用 <em>==</em> 进行比较；但在一些特殊的类当中，<em>equals</em> 方法被覆盖，如String 中的 <em>equals（）</em> 方法被重写过，String类的 <em>equals</em> 方法比较的是对象的值，即两个对象的内容相等，则返回值为 <em>true</em>。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
